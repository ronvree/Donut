module Main where

import BasicFunctions
import HardwareTypes
import Sprockell
import System
import Simulation

program :: [Instruction]
program = [    Load (ImmValue (10)) (reg1),
    WriteInstr (reg1) (DirAddr 9),
    Load (ImmValue (0)) (reg1),
    WriteInstr (reg1) (DirAddr 10),
    TestAndSet (DirAddr 0),
    Receive (reg1),
    Branch (reg1) (Rel (2)),
    Jump (Rel (-3)),
    TestAndSet (DirAddr 1),
    Receive (reg1),
    Branch (reg1) (Rel (2)),
    Jump (Rel (-3)),
    TestAndSet (DirAddr 2),
    Receive (reg1),
    Branch (reg1) (Rel (2)),
    Jump (Rel (-3)),
    ReadInstr (DirAddr 0),
    Receive (reg1),
    Branch (reg1) (Rel (-2)),
    ReadInstr (DirAddr 1),
    Receive (reg1),
    Branch (reg1) (Rel (-2)),
    ReadInstr (DirAddr 2),
    Receive (reg1),
    Branch (reg1) (Rel (-2)),
    ReadInstr (IndAddr (reg0)),
    Receive (reg0),
    EndProg
    ]

thread1 :: [Instruction]
thread1 = [    Load (ImmValue (0)) (regSprID),
    ReadInstr (IndAddr (regSprID)),
    Receive (reg1),
    Branch (reg1) (Rel (2)),
    Jump (Rel (-3)),
    Load (ImmValue (0)) (reg2),
    Store (reg2) (DirAddr 1),
    Load (DirAddr 1) (reg2),
    ReadInstr (DirAddr 9),
    Receive (reg3),
    Compute Lt (reg2) (reg3) (reg2),
    Branch (reg2) (Rel (2)),
    Jump (Abs 31),
    TestAndSet (DirAddr 4),
    Receive (reg3),
    Branch (reg3) (Rel (2)),
    Jump (Rel (-3)),
    ReadInstr (DirAddr 10),
    Receive (reg4),
    Load (ImmValue (2)) (reg5),
    Compute Add (reg4) (reg5) (reg4),
    WriteInstr (reg4) (DirAddr 10),
    WriteInstr (reg0) (DirAddr 4),
    ReadInstr (DirAddr 4),
    Receive (reg3),
    Branch (reg3) (Rel (-2)),
    Load (DirAddr 1) (reg4),
    Load (ImmValue (1)) (reg5),
    Compute Add (reg4) (reg5) (reg4),
    Store (reg4) (DirAddr 1),
    Jump (Abs 7),
    Nop,
    WriteInstr (reg0) (IndAddr (regSprID)),
    ReadInstr (IndAddr (regSprID)),
    Receive (reg1),
    Branch (reg1) (Rel (-2)),
    EndProg
    ]

thread2 :: [Instruction]
thread2 = [    Load (ImmValue (1)) (regSprID),
    ReadInstr (IndAddr (regSprID)),
    Receive (reg1),
    Branch (reg1) (Rel (2)),
    Jump (Rel (-3)),
    Load (ImmValue (0)) (reg2),
    Store (reg2) (DirAddr 2),
    Load (DirAddr 2) (reg2),
    ReadInstr (DirAddr 9),
    Receive (reg3),
    Compute Lt (reg2) (reg3) (reg2),
    Branch (reg2) (Rel (2)),
    Jump (Abs 31),
    TestAndSet (DirAddr 4),
    Receive (reg3),
    Branch (reg3) (Rel (2)),
    Jump (Rel (-3)),
    ReadInstr (DirAddr 10),
    Receive (reg4),
    Load (ImmValue (1)) (reg5),
    Compute Sub (reg4) (reg5) (reg4),
    WriteInstr (reg4) (DirAddr 10),
    WriteInstr (reg0) (DirAddr 4),
    ReadInstr (DirAddr 4),
    Receive (reg3),
    Branch (reg3) (Rel (-2)),
    Load (DirAddr 2) (reg4),
    Load (ImmValue (1)) (reg5),
    Compute Add (reg4) (reg5) (reg4),
    Store (reg4) (DirAddr 2),
    Jump (Abs 7),
    Nop,
    WriteInstr (reg0) (IndAddr (regSprID)),
    ReadInstr (IndAddr (regSprID)),
    Receive (reg1),
    Branch (reg1) (Rel (-2)),
    EndProg
    ]

thread3 :: [Instruction]
thread3 = [    Load (ImmValue (2)) (regSprID),
    ReadInstr (IndAddr (regSprID)),
    Receive (reg1),
    Branch (reg1) (Rel (2)),
    Jump (Rel (-3)),
    Load (ImmValue (0)) (reg2),
    Store (reg2) (DirAddr 3),
    Load (DirAddr 3) (reg2),
    ReadInstr (DirAddr 9),
    Receive (reg3),
    Compute Lt (reg2) (reg3) (reg2),
    Branch (reg2) (Rel (2)),
    Jump (Abs 31),
    TestAndSet (DirAddr 4),
    Receive (reg3),
    Branch (reg3) (Rel (2)),
    Jump (Rel (-3)),
    ReadInstr (DirAddr 10),
    Receive (reg4),
    Load (ImmValue (1)) (reg5),
    Compute Sub (reg4) (reg5) (reg4),
    WriteInstr (reg4) (DirAddr 10),
    WriteInstr (reg0) (DirAddr 4),
    ReadInstr (DirAddr 4),
    Receive (reg3),
    Branch (reg3) (Rel (-2)),
    Load (DirAddr 3) (reg4),
    Load (ImmValue (1)) (reg5),
    Compute Add (reg4) (reg5) (reg4),
    Store (reg4) (DirAddr 3),
    Jump (Abs 7),
    Nop,
    WriteInstr (reg0) (IndAddr (regSprID)),
    ReadInstr (IndAddr (regSprID)),
    Receive (reg1),
    Branch (reg1) (Rel (-2)),
    EndProg
    ]


main = sysTest [program,thread1,thread2,thread3]